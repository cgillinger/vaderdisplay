#!/usr/bin/env python3
"""
Flask Weather Dashboard - Trycktrend-utilities
FAS 2: Refaktorering - Alla trycktrend-funktioner centraliserade
"""

from typing import Dict, Any, Optional


def create_smhi_pressure_trend_fallback(smhi_data: Optional[Dict[str, Any]]) -> Dict[str, Any]:
    """
    FAS 2: Skapa f칬renklad trycktrend fr친n SMHI-data som fallback.
    
    Args:
        smhi_data (dict): SMHI current weather data
        
    Returns:
        dict: F칬renklad trycktrend-struktur kompatibel med Netatmo-format
    """
    if not smhi_data or not smhi_data.get('pressure'):
        return {
            'trend': 'n/a',
            'description': 'Trycktrend ej tillg칛nglig (SMHI)',
            'icon': 'wi-na',
            'data_hours': 0,
            'pressure_change': 0,
            'analysis_quality': 'poor',
            'source': 'smhi_fallback'
        }
    
    # F칬renklad "trend" baserat p친 absolut tryck (SMHI-logik)
    pressure = smhi_data['pressure']
    
    if pressure > 1020:
        trend = 'rising'
        description = 'H칬gtryck - stabilt v칛der (SMHI prognos)'
        icon = 'wi-direction-up'
    elif pressure < 1000:
        trend = 'falling'
        description = 'L친gtryck - instabilt v칛der (SMHI prognos)'
        icon = 'wi-direction-down'
    else:
        trend = 'stable'
        description = 'M친ttligt tryck - v칛xlande v칛der (SMHI prognos)'
        icon = 'wi-minus'
    
    return {
        'trend': trend,
        'description': description,
        'icon': icon,
        'data_hours': 0,  # SMHI har inte historisk data
        'pressure_change': 0,  # Kan inte ber칛knas utan historik
        'analysis_quality': 'basic',
        'source': 'smhi_fallback'
    }


def validate_pressure_trend_data(pressure_trend: Optional[Dict[str, Any]]) -> bool:
    """
    Validera att trycktrend-data 칛r anv칛ndbar.
    
    Args:
        pressure_trend (dict): Trycktrend-data att validera
        
    Returns:
        bool: True om data 칛r giltig och anv칛ndbar
    """
    if not pressure_trend or not isinstance(pressure_trend, dict):
        return False
    
    # Kontrollera att trend inte 칛r 'n/a'
    trend = pressure_trend.get('trend', 'n/a')
    if trend == 'n/a' or not trend:
        return False
    
    # Kontrollera att trend 칛r ett giltigt v칛rde
    valid_trends = ['rising', 'falling', 'stable']
    if trend not in valid_trends:
        return False
    
    return True


def get_pressure_trend_description(trend: str, pressure_change: float = 0) -> str:
    """
    Generera beskrivande text f칬r trycktrend.
    
    Args:
        trend (str): Trend-riktning ('rising', 'falling', 'stable')
        pressure_change (float): Tryckf칬r칛ndring i hPa
        
    Returns:
        str: Beskrivande text f칬r trenden
    """
    descriptions = {
        'rising': f"Stigande tryck{f' (+{pressure_change:.1f} hPa)' if pressure_change > 0 else ''} - f칬rb칛ttrat v칛der v칛ntas",
        'falling': f"Fallande tryck{f' ({pressure_change:.1f} hPa)' if pressure_change < 0 else ''} - f칬rs칛mrat v칛der v칛ntas", 
        'stable': f"Stabilt tryck{f' ({pressure_change:+.1f} hPa)' if abs(pressure_change) > 0.1 else ''} - of칬r칛ndrat v칛der"
    }
    
    return descriptions.get(trend, "Ok칛nd trycktrend")


def get_pressure_trend_icon(trend: str) -> str:
    """
    H칛mta Weather Icons-klass f칬r trycktrend.
    
    Args:
        trend (str): Trend-riktning ('rising', 'falling', 'stable')
        
    Returns:
        str: Weather Icons CSS-klass
    """
    icons = {
        'rising': 'wi-direction-up',
        'falling': 'wi-direction-down',
        'stable': 'wi-minus'
    }
    
    return icons.get(trend, 'wi-na')


def analyze_pressure_trend_quality(data_hours: float, pressure_change: float) -> str:
    """
    Analysera kvaliteten p친 trycktrend-data.
    
    Args:
        data_hours (float): Antal timmar med historisk data
        pressure_change (float): Absolut tryckf칬r칛ndring i hPa
        
    Returns:
        str: Kvalitets-beskrivning ('excellent', 'good', 'fair', 'poor')
    """
    # Kvalitet baserat p친 datam칛ngd och f칬r칛ndringsstorlek
    abs_change = abs(pressure_change)
    
    if data_hours >= 3.0 and abs_change >= 2.0:
        return 'excellent'  # Mycket data och tydlig trend
    elif data_hours >= 2.0 and abs_change >= 1.0:
        return 'good'       # Tillr칛ckligt data och m칛rkbar trend
    elif data_hours >= 1.0 and abs_change >= 0.5:
        return 'fair'       # Begr칛nsad data men synlig trend
    else:
        return 'poor'       # Otillr칛cklig data eller minimal f칬r칛ndring


def format_pressure_value(pressure: Optional[float]) -> str:
    """
    Formatera tryckv칛rde f칬r visning.
    
    Args:
        pressure (float): Tryckv칛rde i hPa
        
    Returns:
        str: Formaterat tryckv칛rde med enhet
    """
    if pressure is None:
        return "N/A hPa"
    
    return f"{pressure:.1f} hPa"


def classify_pressure_level(pressure: float) -> Dict[str, str]:
    """
    Klassificera tryckniv친 enligt meteorologiska standarder.
    
    Args:
        pressure (float): Lufttryck i hPa
        
    Returns:
        dict: Klassificering med beskrivning och f칛rgkod
    """
    if pressure >= 1025:
        return {
            'level': 'very_high',
            'description': 'Mycket h칬gt tryck',
            'weather_tendency': 'Stabilt, klart v칛der',
            'color_class': 'pressure-very-high'
        }
    elif pressure >= 1015:
        return {
            'level': 'high',
            'description': 'H칬gt tryck',
            'weather_tendency': 'Mestadels klart v칛der',
            'color_class': 'pressure-high'
        }
    elif pressure >= 1005:
        return {
            'level': 'normal',
            'description': 'Normalt tryck',
            'weather_tendency': 'V칛xlande v칛der',
            'color_class': 'pressure-normal'
        }
    elif pressure >= 995:
        return {
            'level': 'low',
            'description': 'L친gt tryck',
            'weather_tendency': 'Molnigt, risk f칬r regn',
            'color_class': 'pressure-low'
        }
    else:
        return {
            'level': 'very_low',
            'description': 'Mycket l친gt tryck',
            'weather_tendency': 'Stormigt v칛der, kraftig nederb칬rd',
            'color_class': 'pressure-very-low'
        }


def merge_pressure_trends(netatmo_trend: Optional[Dict[str, Any]], 
                         smhi_data: Optional[Dict[str, Any]]) -> Dict[str, Any]:
    """
    Intelligent sammanslagning av Netatmo- och SMHI-tryckdata.
    
    Args:
        netatmo_trend (dict): Netatmo trycktrend-data
        smhi_data (dict): SMHI v칛derdata
        
    Returns:
        dict: B칛sta tillg칛ngliga trycktrend-data
    """
    # F칬rs칬k Netatmo f칬rst (mest detaljerad)
    if validate_pressure_trend_data(netatmo_trend):
        return {
            **netatmo_trend,
            'source': 'netatmo',
            'reliability': 'high'
        }
    
    # Fallback till SMHI-baserad trend
    smhi_fallback = create_smhi_pressure_trend_fallback(smhi_data)
    smhi_fallback['reliability'] = 'medium'
    
    print("游늵 Trycktrend: Anv칛nder SMHI-fallback (Netatmo otillg칛nglig)")
    
    return smhi_fallback
