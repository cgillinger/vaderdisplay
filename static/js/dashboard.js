/**
 * Modern Weather Dashboard - REFACTORED Main File
 * FAS 3: MODUL√ÑR ARKITEKTUR med ES6 Modules
 * FONT AWESOME OPTIMERAD + CIRKUL√ÑR KLOCKA + BAROMETER + LP156WH4 F√ñRST√ÑRKNING
 * + NETATMO INTELLIGENCE: Automatisk datasubstitution och k√§llhantering
 * + UI DEGRADERING: Dolda element och layout-anpassningar
 * + HUMIDITY FIX: D√∂lj luftfuktighet helt n√§r data saknas
 * 
 * Fils√∂kv√§g: static/js/dashboard.js
 */

// === ES6 MODULE IMPORTS ===

// State Management
import { 
    initializeStateManager, 
    setUpdateInterval, 
    setClockInterval,
    hideLoadingOverlay,
    UPDATE_INTERVAL,
    THEME_CHECK_INTERVAL
} from './modules/state-manager.js';

// Icon Management
import { initializeIconSystems } from './modules/icon-manager.js';

// Clock System
import { initializeCircularClock } from './modules/clock-manager.js';

// API Management
import { 
    updateAllData, 
    checkThemeUpdate, 
    startDataUpdates, 
    startThemeUpdates 
} from './modules/api-manager.js';

// Wind Management
import { removeWindDetailItems } from './modules/wind-manager.js';

// UI Systems
import { 
    initializeUIDegradation, 
    applyUIAdaptations 
} from './modules/ui-degradation.js';

import { initializeRobustIcons } from './modules/ui-updaters.js';

// === MAIN INITIALIZATION FUNCTION ===

/**
 * Initialisera komplett dashboard med modul√§r arkitektur
 */
async function initializeDashboard() {
    try {
        console.log('üöÄ Weather Dashboard FAS 3: Modul√§r refaktorering aktiverad med HUMIDITY FIX');
        console.log('üì¶ Initialiserar modul√§rt dashboard...');
        
        // FAS 1: Initiera grundl√§ggande system
        initializeStateManager();
        initializeIconSystems();
        initializeUIDegradation();
        
        // FAS 2: Initiera visuella komponenter
        initializeRobustIcons();
        initializeCircularClock();
        removeWindDetailItems();
        
        // FAS 3: H√§mta initial data och applicera UI-anpassningar
        await updateAllData();
        
        // FAS 4: Starta bakgrundsprocesser
        const dataIntervalId = startDataUpdates(UPDATE_INTERVAL);
        setUpdateInterval(dataIntervalId);
        
        const themeIntervalId = startThemeUpdates(THEME_CHECK_INTERVAL);
        // Theme interval hanteras av api-manager, inte state-manager
        
        // FAS 5: Initiera WeatherEffects om tillg√§ngligt
        await initializeWeatherEffectsIfAvailable();
        
        // FAS 6: Slutf√∂r initialisering
        hideLoadingOverlay();
        
        console.log('‚úÖ FAS 3: Modul√§rt Dashboard med Graci√∂s UI-degradering + HUMIDITY FIX initialiserat! üíßüé®üöÄ');
        
    } catch (error) {
        console.error('‚ùå Fel vid initialisering av modul√§rt dashboard:', error);
        
        // Fallback: Visa fel-meddelande
        const statusElement = document.getElementById('status-text');
        if (statusElement) {
            statusElement.textContent = '‚ö†Ô∏è Kunde inte ladda v√§derdata - f√∂rs√∂ker igen...';
        }
        
        // F√∂rs√∂k igen efter 5 sekunder
        setTimeout(() => {
            console.log('üîÑ F√∂rs√∂ker initiera dashboard igen...');
            initializeDashboard();
        }, 5000);
    }
}

/**
 * Initiera WeatherEffects om det finns tillg√§ngligt
 */
async function initializeWeatherEffectsIfAvailable() {
    try {
        if (window.weatherEffectsManager && dashboardState?.config?.weather_effects_enabled) {
            await window.weatherEffectsManager.initialize();
            console.log('‚úÖ WeatherEffects initialiserat');
        }
    } catch (error) {
        console.warn("‚ö†Ô∏è WeatherEffects initialization failed:", error);
    }
}

// === LEGACY SUPPORT FUNCTIONS ===

/**
 * Legacy support f√∂r externa anrop
 * Dessa funktioner finns kvar f√∂r kompatibilitet
 */

// Exponera viktiga funktioner globalt f√∂r backward compatibility
window.dashboard = {
    initialize: initializeDashboard,
    updateAllData: updateAllData,
    applyUIAdaptations: applyUIAdaptations
};

// === ERROR RECOVERY ===

/**
 * √Öterh√§mtning vid kritiska fel
 */
function initializeErrorRecovery() {
    let errorCount = 0;
    const maxErrors = 3;
    
    window.addEventListener('error', function(event) {
        errorCount++;
        console.error(`üî¥ Kritiskt fel #${errorCount}:`, event.error);
        
        if (errorCount >= maxErrors) {
            console.error('üö® F√∂r m√•nga fel - aktiverar n√∂dl√§ge');
            
            // N√∂dl√§ge: Visa grundl√§ggande information
            document.body.innerHTML = `
                <div style="padding: 20px; text-align: center; font-family: Arial, sans-serif;">
                    <h1>üå§Ô∏è V√§der Dashboard</h1>
                    <p>Ett tekniskt fel har intr√§ffat. Sidan laddas om automatiskt...</p>
                    <p><em>Error recovery mode active</em></p>
                </div>
            `;
            
            // Ladda om sidan efter 5 sekunder
            setTimeout(() => {
                window.location.reload();
            }, 5000);
        }
    });
}

// === MODULE HEALTH CHECK ===

/**
 * Kontrollera att alla moduler √§r laddade korrekt
 * @returns {boolean} True om alla moduler √§r tillg√§ngliga
 */
function checkModuleHealth() {
    const requiredModules = [
        'initializeStateManager',
        'initializeIconSystems', 
        'initializeCircularClock',
        'updateAllData',
        'applyUIAdaptations'
    ];
    
    const missingModules = [];
    
    // Kontrollera att alla importerade funktioner finns
    try {
        if (typeof initializeStateManager !== 'function') missingModules.push('state-manager');
        if (typeof initializeIconSystems !== 'function') missingModules.push('icon-manager');
        if (typeof initializeCircularClock !== 'function') missingModules.push('clock-manager');
        if (typeof updateAllData !== 'function') missingModules.push('api-manager');
        if (typeof applyUIAdaptations !== 'function') missingModules.push('ui-degradation');
    } catch (error) {
        console.error('‚ùå Fel vid modulkontroll:', error);
        return false;
    }
    
    if (missingModules.length > 0) {
        console.error('‚ùå Saknade moduler:', missingModules);
        return false;
    }
    
    console.log('‚úÖ Alla moduler laddade korrekt');
    return true;
}

// === PERFORMANCE MONITORING ===

/**
 * √ñvervaka prestanda f√∂r dashboard-initialisering
 */
function monitorInitializationPerformance() {
    const startTime = performance.now();
    
    return {
        finish: () => {
            const endTime = performance.now();
            const totalTime = endTime - startTime;
            
            console.log(`üìä Dashboard-initialisering slutf√∂rd p√• ${totalTime.toFixed(2)}ms`);
            
            if (totalTime > 2000) {
                console.warn('‚ö†Ô∏è L√•ngsam initialisering - √∂verv√§g optimering');
            }
            
            return totalTime;
        }
    };
}

// === STARTUP SEQUENCE ===

/**
 * Huvudstartsekvens f√∂r dashboard
 */
async function startDashboard() {
    const performanceMonitor = monitorInitializationPerformance();
    
    try {
        console.log('üèÅ Startar modul√§rt weather dashboard...');
        
        // Kontrollera modulh√§lsa f√∂rst
        if (!checkModuleHealth()) {
            throw new Error('Kritiska moduler saknas');
        }
        
        // Initiera fel√•terh√§mtning
        initializeErrorRecovery();
        
        // Starta huvudinitialisering
        await initializeDashboard();
        
        performanceMonitor.finish();
        
    } catch (error) {
        console.error('‚ùå Kritiskt fel vid dashboard-start:', error);
        
        // Fallback-initialisering
        document.body.innerHTML = `
            <div style="padding: 20px; background: #f44336; color: white; text-align: center;">
                <h2>‚ö†Ô∏è Dashboard Initialization Failed</h2>
                <p>Ett kritiskt fel intr√§ffade vid laddning av v√§der-dashboard.</p>
                <p>Kontrollera att alla moduler √§r tillg√§ngliga och f√∂rs√∂k igen.</p>
                <button onclick="location.reload()" style="margin-top: 10px; padding: 10px 20px; font-size: 16px;">
                    üîÑ Ladda om sidan
                </button>
            </div>
        `;
    }
}

// === DOM READY EVENT ===

/**
 * V√§nta p√• DOM och starta dashboard
 */
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM laddat - startar modul√§rt dashboard');
    startDashboard();
});

// === MODULE EXPORT (f√∂r testning) ===

// Exportera f√∂r testning och development
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        initializeDashboard,
        checkModuleHealth,
        startDashboard
    };
}

// === DEVELOPMENT HELPERS ===

/**
 * Development-hj√§lpfunktioner (endast i development)
 */
if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    window.dev = {
        reinitialize: initializeDashboard,
        checkModules: checkModuleHealth,
        testUIAdaptations: applyUIAdaptations,
        modules: {
            stateManager: 'state-manager.js',
            iconManager: 'icon-manager.js', 
            clockManager: 'clock-manager.js',
            apiManager: 'api-manager.js',
            windManager: 'wind-manager.js',
            barometerManager: 'barometer-manager.js',
            netatmoIntelligence: 'netatmo-intelligence.js',
            formatters: 'formatters.js',
            uiDegradation: 'ui-degradation.js',
            uiUpdaters: 'ui-updaters.js'
        }
    };
    
    console.log('üõ†Ô∏è Development helpers loaded - anv√§nd window.dev f√∂r debugging');
}

console.log('üì¶ MODUL√ÑRT Weather Dashboard Main File laddat! üéØ');

// === FINAL SYSTEM CHECK ===
console.log('üéØ FAS 3: Modul√§r Weather Dashboard System Ready');
console.log('üìã Moduler: 11 moduler + 1 huvudfil');
console.log('üöÄ Redo f√∂r initialisering vid DOMContentLoaded');